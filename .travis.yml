sudo: true

language: cpp

compiler: gcc

env:
  # - TEST="valgrind" # commented out until you finish the simulator code
  - TEST="unit" TYPE="[network]"
  - TEST="unit" TYPE="[backprop]"
  - TEST="unit" TYPE="[adadelta]"
  - TEST="unit" TYPE="[exploration]"
  # - TEST="unit" TYPE="[pruner]" # unstable
  # - TEST="unit" TYPE="[reinforcement]" # unstable (uses pruning)
  # - TEST="unit" TYPE="[simulator]" # unstable
  - TEST="unit" TYPE="" COVER="YES" # For coveralls, will take longer than the others

before_install:
  # Coveralls
  - if [[ "$COVER" == "YES" ]]; then rm tests/pruning.cpp; rm tests/simulator.cpp; rm tests/reinforcement.cpp; fi # Remove pruning test

  - if [[ "$COVER" == "YES" ]]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [[ "$COVER" == "YES" ]]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [[ "$COVER" == "YES" ]]; then sudo make -C lcov-1.11/ install; fi
# install lcov to coveralls conversion + upload tool
  - if [[ "$COVER" == "YES" ]]; then gem install coveralls-lcov; fi

  # Valgrind
  - if [[ "$TEST" == "valgrind" ]]; then sudo apt-get install valgrind; fi

  # SFML
  - wget http://sfml-dev.org/download/sfml/2.1/SFML-2.1-linux-gcc-64bits.tar.bz2 -O /tmp/sfml.tar.bz2
  - tar -xjvf /tmp/sfml.tar.bz2
  - sudo cp -r SFML-2.1/* /usr/
  - sudo apt-get install -y libjpeg62-dev libsndfile1-dev libglew1.5 libglew1.5-dev libfreetype6 libjpeg-turbo8 libjpeg8 libopenal-data libopenal1  libxrandr2 libxrender1 libsoil1

  # g++4.8.1
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update -qq

install:
  - sudo apt-get install -qq g++-4.8
  - sudo apt-get install -qq libstdc++6-4.7-dev
  - export CXXFLAGS="-std=c++0x"
  - export CXX="g++-4.8"
  - cd ~/build/FidoProject/Fido
  - if [[ "$COVER" == "YES" ]]; then lcov --directory . --zerocounters; fi

script:
  # Build
  - cd ~/build/FidoProject/Fido
  - ./configure $SFML && make && sudo make install
  # Run Unit Tests
  - if [[ "$TEST" == "unit" ]]; then sudo ./runtests.sh $TYPE; fi
  # Run Valgrind on unit tests
  - if [[ "$TEST" == "valgrind" ]]; then cd tests/; make; mkdir -p temp; valgrind --leak-check=full --error-exitcode=1 ./tests.o; fi

after_success:
  - if [[ "$COVER" == "YES" ]]; then lcov --directory . --capture --output-file coverage.info; fi # capture coverage info
  - if [[ "$COVER" == "YES" ]]; then lcov --remove coverage.info 'tests/*' '/usr/*' --output-file coverage.info; fi # filter out system and test code
  - if [[ "$COVER" == "YES" ]]; then lcov --list coverage.info; fi # debug before upload
  - if [[ "$COVER" == "YES" ]]; then coveralls-lcov coverage.info; fi # uploads to coveral
