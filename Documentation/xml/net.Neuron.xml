<?xml version='1.0' encoding='utf-8'?>
<class id="net::Neuron" name="Neuron" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Class representing a single neuron.</brief>
  <doc>Each neuron takes a variable number of inputs each assigned a weight and returns one output. Each neuron has a threshold value used to detemine if an output is produced (or to determine the magnitude of the neuron's output). A quality class by all accounts.
</doc>
  <field id="net::Neuron::weights" name="weights">
    <brief>Set of weights for the Neuron object.</brief>
    <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
  </field>
  <constructor id="net::Neuron::Neuron" name="Neuron">
    <brief> Create a neuron with randomly assigned weights.</brief>
    <doc>Each weight is a random double between 0 and 1
</doc>
    <argument id="net::Neuron::Neuron::numInputs" name="numInputs">
      <type builtin="yes" name="int" />
    </argument>
  </constructor>
  <constructor id="net::Neuron::Neuron" name="Neuron">
    <brief>Create a neuron with given weights.</brief>
    <argument id="net::Neuron::Neuron::w" name="w">
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </argument>
  </constructor>
  <method id="net::Neuron::getOutput" name="getOutput">
    <brief> Get outputs of neuron from given inputs.       </brief>
    <doc>The last weight is the threshold, as documented [here](http://www.ai-junkie.com/ann/evolved/nnt6.html).
</doc>
    <return>
      <type builtin="yes" name="double" />
    </return>
    <argument id="net::Neuron::getOutput::inputs" name="inputs">
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </argument>
  </method>
  <method id="net::Neuron::randomWeight" name="randomWeight" static="yes">
    <brief>Return a random weight between zero and one.</brief>
    <return>
      <type builtin="yes" name="double" />
    </return>
  </method>
</class>
