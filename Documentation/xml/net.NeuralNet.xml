<?xml version='1.0' encoding='utf-8'?>
<class id="net::NeuralNet" name="NeuralNet" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Class representing a neural network.</brief>
  <doc>A flexible implementation designed to be usable in a wide scope of projects.
</doc>
  <field id="net::NeuralNet::net" name="net">
    <brief>A two dimensional network of neurons.</brief>
    <type name="std::__1::vector&lt;std::__1::vector&lt;net::Neuron, std::__1::allocator&lt;net::Neuron&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;net::Neuron, std::__1::allocator&lt;net::Neuron&gt; &gt; &gt; &gt;" />
  </field>
  <field id="net::NeuralNet::numInputs" name="numInputs">
    <brief>Variables used to describe Neural Networks.</brief>
    <type builtin="yes" name="int" />
  </field>
  <field id="net::NeuralNet::numOutputs" name="numOutputs">
    <brief>Variables used to describe Neural Networks.</brief>
    <type builtin="yes" name="int" />
  </field>
  <field id="net::NeuralNet::numHiddenLayers" name="numHiddenLayers">
    <brief>Variables used to describe Neural Networks.</brief>
    <type builtin="yes" name="int" />
  </field>
  <field id="net::NeuralNet::numNeuronsPerHiddenLayer" name="numNeuronsPerHiddenLayer">
    <brief>Variables used to describe Neural Networks.</brief>
    <type builtin="yes" name="int" />
  </field>
  <constructor id="net::NeuralNet::NeuralNet" name="NeuralNet">
    <brief> Manually initialize a neural network.</brief>
    <doc>Uses the number of inputs, the number of outputs, the number of hidden layers, and the number of neurons per hidden layer.
</doc>
    <argument id="net::NeuralNet::NeuralNet::numInputs_" name="numInputs_">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="net::NeuralNet::NeuralNet::numOutputs_" name="numOutputs_">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="net::NeuralNet::NeuralNet::numHiddenLayers_" name="numHiddenLayers_">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="net::NeuralNet::NeuralNet::numNeuronsPerHiddenLayer_" name="numNeuronsPerHiddenLayer_">
      <type builtin="yes" name="int" />
    </argument>
  </constructor>
  <constructor id="net::NeuralNet::NeuralNet" name="NeuralNet">
    <brief>Make a neural network with the same number of inputs, outputs, hidden layers, and neurons per hidden layer.</brief>
    <argument id="net::NeuralNet::NeuralNet::otherNet" name="otherNet">
      <type name="NeuralNet" qualifier=" const &amp;" ref="net::NeuralNet#net::NeuralNet" />
    </argument>
  </constructor>
  <method id="net::NeuralNet::getOutput" name="getOutput">
    <brief> Produce an output based on an input vector of doubles.</brief>
    <doc>The crowning function of this class.</doc>
    <return>
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </return>
    <argument id="net::NeuralNet::getOutput::input" name="input">
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </argument>
  </method>
  <method id="net::NeuralNet::getWeights" name="getWeights">
    <brief> Get the weights of each neuron in the net.</brief>
    <doc>These values are organized into a vector starting from the first neuron
in the first layer to the last neuron in the output layer.
</doc>
    <return>
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </return>
  </method>
  <method id="net::NeuralNet::setWeights" name="setWeights">
    <brief> Set the weights of each neuron in the net according to a vector.</brief>
    <doc>Starts at the first neuron in the first layer and goes to the last neruon in the last layer.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="net::NeuralNet::setWeights::w" name="w">
      <type name="std::__1::vector&lt;double, std::__1::allocator&lt;double&gt; &gt;" />
    </argument>
  </method>
  <method id="net::NeuralNet::sigmoid" name="sigmoid">
    <brief> A s-shaped math function.</brief>
    <doc>Used by the network to get a gradient value for each neurons output.</doc>
    <return>
      <type builtin="yes" name="double" />
    </return>
    <argument id="net::NeuralNet::sigmoid::activiation" name="activiation">
      <type builtin="yes" name="double" />
    </argument>
  </method>
</class>
